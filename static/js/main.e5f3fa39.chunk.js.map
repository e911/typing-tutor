{"version":3,"sources":["components/SecondaryButton.js","tutor/index.js","components/header.js","components/PrimaryButton.js","components/TypingAnim.js","App.js","serviceWorker.js","index.js"],"names":["SecondaryButton","styled","button","_templateObject","INITIAL_STATE","text","wordIndexPosition","timer","typeState","progress","timeElapsed","showResults","currentWord","wpm","incorrect","incorrectNumber","AppContainer","div","tutor_templateObject","TutorContainer","_templateObject2","CountDownTimer","_templateObject3","Loader","_templateObject4","UserStats","_templateObject5","GeneratedText","_templateObject6","ResultsDiv","_templateObject7","CurrentWord","_templateObject8","ResultsContainer","_templateObject9","RetryButton","_templateObject10","TypeTutor","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getTextData","state","setState","split","setInterval","document","addEventListener","registerKeyDown","clearInterval","startWatch","prev","generateCurrentTypingWord","_this$state","map","char","index","react_default","a","createElement","className","generateText","_this$state2","isErrored","indexOf","correct","undefined","_ref","key","_this$state3","length","charAt","concat","toConsumableArray","push","keyboardRef","keyboard","removeButtonTheme","addButtonTheme","Math","floor","watch","removeEventListener","slice","reset","onKeyBoardChange","input","console","log","onKeyBoardKeyPress","_this2","_this$state4","seconds","minutes","accuracy","toFixed","totalLength","totalWords","style","position","components_SecondaryButton","onClick","Fragment","build_default","ref","r","onChange","onKeyPress","layout","default","shift","display","{bksp}","{enter}","{tab}","{lock}","{shift}","{space}","Component","HeaderContainer","header_templateObject","LeftContainer","header_templateObject2","RightContainer","header_templateObject3","Header","PrimaryButton","PrimaryButton_templateObject","TypedReactDemo","options","strings","typeSpeed","backSpeed","loop","loopCount","Infinity","typed","Typed","el","destroy","whiteSpace","React","AppDiv","App_templateObject","ModalDiv","App_templateObject2","App","showModal","hideModal","header","TypingAnim_TypedReactDemo","components_PrimaryButton","tutor_TypeTutor","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5f3fa39.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst SecondaryButton = styled.button`\n  background-color: white;\n  color: rgb(1,167,88);\n  font-size: 1rem;\n  font-weight: bold;\n  text-align: center;\n  border: 0.5px solid rgb(1,167,88);\n  border-radius: 50px;\n  outline: none;\n  padding-left: 1.5rem;\n  padding-right: 1.5rem;\n  cursor: pointer;\n  min-width: 100px;\n  height: 34px;\n  user-select: none;\n  margin: auto;\n\n  &:disabled,\n  &:hover:disabled,\n  &:focus:disabled {\n    cursor: not-allowed;\n    color: rgb(1,167,88);\n    background-color: rgb(11,102,35);\n    border-color: rgb(1,167,88);\n    opacity: 0.5;\n  }\n`;\n\nexport default SecondaryButton;\n","import React, { Component } from 'react';\nimport './index.css';\nimport SecondaryButton from '../components/SecondaryButton';\nimport styled from 'styled-components';\nimport Keyboard from 'react-simple-keyboard';\nimport 'react-simple-keyboard/build/css/index.css';\n\n\n// Initial state while typing\nconst INITIAL_STATE = {\n    // The overall text data to type\n    text: '',\n    // state to store the index position for cursor after each word is typed\n    wordIndexPosition: 0,\n    // Initial loading timer\n    timer: 5,\n    // The array containing all the letters typed by the user\n    typeState: [],\n    // The array containing correct letters typed by the user\n    progress: [],\n    // Th time taken by user to type\n    timeElapsed: 0,\n    // state to show results after user finishes the text\n    showResults: false,\n    // the current word the user is typing\n    currentWord: '',\n    // words per minute\n    wpm: 0,\n    // Incorrect keys typed by the user stored in the format: [0,...,n-1] ;n= No. of consecutive errors typed\n    incorrect: [],\n    // Number of total incorrect\n    incorrectNumber: 0,\n};\n\nconst AppContainer = styled.div`\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    height: 85vh;\n    min-height: fit-content;\n    position: relative;\n    top: 70px;\n    width: 70%;\n    margin: auto;\n    max-width: 1300px;\n    \n    .watch {\n        opacity: 1;\n        padding: 1em 0 1em 1em;\n    }\n`;\n\nconst TutorContainer = styled.div`\n    color: black;\n    padding: 0 1em;\n    width: 100%;\n    line-height: 1.6em;\n    font-weight: 400;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    font-size:20px;\n`;\n\nconst CountDownTimer = styled.div`\n    width: 70%;\n    margin: auto;\n    display: flex;\n    box-sizing: border-box;\n    background-color: rgba(1,167,88, 0.05);\n    font-weight: bold;\n    border-radius: 5px;\n    color: rgba(1,167,88, 1);\n    align-items: center;\n    justify-content: center;\n    transition: opacity .5s ease-in;\n    transition-delay: .2s;\n    margin-bottom: 0.7em;\n    \n    &.hide {\n        opacity: 0;\n    }\n`;\n\nconst Loader = styled.div`\n    display: inline-block;\n    margin-top: 5em;\n    align-self: center;\n    justify-self: center;\n    width: 64px;\n    height: 64px;\n    \n    ::after {\n        content: \" \";\n        display: block;\n        width: 46px;\n        height: 46px;\n        margin: 1px;\n        border-radius: 50%;\n        will-change: transform;\n        border-color: rgba(180, 241, 241, 0.678) transparent rgba(180, 241, 241, 0.678) transparent;\n        animation: loadinganim 0.6s linear infinite;\n    }\n`;\n\nconst UserStats = styled.div`\n    display:flex;\n    flex-grow: 1;\n    justify-content: space-around;\n`;\n\nconst GeneratedText = styled.div`\n    border: 1px solid rgb(1,167,88);\n    padding: 1em;\n    min-width: 100%;\n    box-sizing: border-box;\n    border-radius: 3.8px;\n    margin: auto;\n    text-align: center;\n    \n    .progressed {\n        color: forestgreen;\n        border-bottom: 1px solid forestgreen;\n    }\n    \n    .error {\n        background-color: #ef5145;\n        border-bottom: 1px solid #ef5145;\n        color: white;\n    }\n    \n    span {\n        font-size: 20px;\n    }\n    \n    &.disabled {\n        background-color: #ebe9e9cc;\n        border: 1px solid #ebe9e9cc;\n    }\n`;\n\n\nconst ResultsDiv = styled.div`\n    display:flex;\n    flex-direction:column;\n`;\n\nconst CurrentWord = styled.div`\n    width: fit-content;\n    margin: auto;\n    padding: 2em 1em;\n    \n    .char {\n        font-size: 1.42em;\n        font-weight: 500;\n        color: rgba(160, 160, 160, 0.43);\n    }\n    \n    .char.typed {\n        color: #5f5959;\n    }\n`;\n\nconst ResultsContainer = styled.div`\n    margin-top: 2em;\n    padding: 2em;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    box-sizing: border-box;\n    align-items: center;\n    justify-content: center;\n    \n    p {\n        margin: 0;\n    } \n`;\n\nconst RetryButton = styled(SecondaryButton)`\n    width: 30%;\n    margin: auto;\n`;\n\nexport default class TypeTutor extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            text: '',\n            wordIndexPosition: 0,\n            timer: 5,\n            typeState: [],\n            progress: [],\n            timeElapsed: 0,\n            showResults: false,\n            currentWord: '',\n            wpm: 0,\n            incorrect: [],\n            incorrectNumber: 0,\n        };\n    }\n\n    // Get text data on component load\n    componentDidMount() {\n        this.getTextData();\n    }\n\n    // Remove the event listener binding on unmount\n    componentWillUnmount() {\n        document.removeEventListener('keydown');\n    }\n\n    // Get the text, current Word to type, start timer and the watch\n    getTextData = () => {\n        const { wordIndexPosition } = this.state;\n        const text = \"This is a random typed text for demo purpose only. A demo text. Just a demo and nothing more, nothing less. Enjoy while it lasts. I am not sure why but good day sir!\";\n        this.setState({ text, currentWord: text.split(' ')[wordIndexPosition] });\n        this.timer = setInterval(() => {\n            const { timer } = this.state;\n            if (timer === 0) {\n                document.addEventListener('keydown', this.registerKeyDown);\n                clearInterval(this.timer);\n                this.startWatch()\n            } else {\n                this.setState(prev => ({ timer: prev.timer - 1 }))\n            }\n        }, 1000)\n    };\n\n    // Show the current word to type\n    generateCurrentTypingWord = () => {\n        const { currentWord, typeState } = this.state;\n        const alphabets = currentWord.split('');\n        return alphabets.map((char, index) => {\n            const state = typeState[index] === char ? 'typed char' : 'char';\n            return (\n                <span className={state}>{char}</span>\n            )\n        })\n    };\n\n    // Show the text with typed, remaining as well as errored letters\n    generateText = () => {\n        const { text, progress, incorrect } = this.state;\n        return text\n            ? text.split('').map((char, index) => {\n                const isErrored = incorrect.indexOf(index) >= 0;\n                const correct = char === progress[index] ? 'progressed' : undefined;\n                const className = isErrored ? 'error' : correct;\n                return (\n                    <span className={className}>\n              {char}\n            </span>\n                )\n            })\n            : null\n    };\n\n    //Key down event register so as to know the typing info\n    registerKeyDown = ({ key }) => {\n        const { currentWord, typeState, text, wordIndexPosition, progress, timeElapsed, incorrect, incorrectNumber } = this.state;\n\n        if (key === 'Shift') {\n            return;\n        }\n        if (key === 'Backspace') {\n            this.setState({\n                incorrect: [...incorrect.slice(0, incorrect.length - 1)],\n            });\n            return\n        }\n        if (currentWord.length === typeState.length && !incorrect.length && key === ' ') {\n            progress.push(key);\n\n            this.keyboardRef.keyboard.removeButtonTheme(\"{space}\", \"currentKey\");\n            this.keyboardRef.keyboard.addButtonTheme(text.split(' ')[wordIndexPosition+1][0], \"currentKey\");\n\n            this.setState({\n                currentWord: text.split(' ')[wordIndexPosition + 1],\n                wordIndexPosition: wordIndexPosition + 1,\n                typeState: [],\n                progress: [...progress],\n                wpm: Math.floor(((wordIndexPosition + 1) / timeElapsed) * 60),\n            })\n        } else if (currentWord.charAt(typeState.length) === key && !incorrect.length) {\n            typeState.push(key);\n            progress.push(key);\n\n            this.keyboardRef.keyboard.removeButtonTheme(currentWord.charAt(typeState.length-1), \"currentKey\");\n\n            if (currentWord.charAt(typeState.length) === ''){\n                this.keyboardRef.keyboard.addButtonTheme(\"{space}\", \"currentKey\");\n            }\n            this.keyboardRef.keyboard.addButtonTheme(currentWord.charAt(typeState.length), \"currentKey\");\n\n            this.setState({\n                typeState: [...typeState],\n                progress: [...progress],\n            })\n        } else if (incorrect.indexOf(progress.length + incorrect.length) < 0) {\n            this.setState({\n                incorrect: [...incorrect, progress.length + incorrect.length],\n                incorrectNumber: incorrectNumber+1,\n            })\n        }\n        if (text.length === progress.length) {\n            clearInterval(this.watch);\n            document.removeEventListener('keydown', this.registerKeyDown)\n            this.setState({\n                showResults: true,\n                wpm: Math.floor((text.split(' ').length / timeElapsed) * 60),\n            })\n        }\n    };\n\n    // Reset everything\n    reset = () => {\n        if (this.timer) clearInterval(this.timer);\n        if (this.watch) clearInterval(this.watch);\n        this.setState(INITIAL_STATE, () => {\n            this.getTextData()\n        });\n        this.setState({\n            typeState: [],\n            progress: []\n        });\n    };\n\n    // Start watch\n    startWatch = () => {\n        this.watch = setInterval(() => {\n            this.setState(prev => ({\n                timeElapsed: prev.timeElapsed + 1,\n            }))\n        }, 1000)\n    };\n\n    onKeyBoardChange = (input) => {\n        console.log(\"Input changed\", input);\n    };\n\n    onKeyBoardKeyPress = (button) => {\n        console.log(\"Button pressed\", button);\n    };\n\n    render() {\n        const { text, timer, currentWord, timeElapsed, showResults, wpm, incorrectNumber } = this.state;\n        const seconds = timeElapsed % 60 > 9 ? timeElapsed % 60 : `0${timeElapsed % 60}`;\n        const minutes =\n            (timeElapsed - seconds) / 60 > 10\n                ? (timeElapsed - seconds) / 60\n                : `0${(timeElapsed - seconds) / 60}`;\n        const accuracy = 100 - ((incorrectNumber/text.length)* 100).toFixed(2);\n        const totalLength = text.length;\n        const totalWords = text.split(\" \").length;\n        return (\n            <AppContainer>\n                <TutorContainer>\n                    <CountDownTimer className={`${timer === 0 && 'hide'}`}>\n                        {text.length\n                            ? `${timer === 0 ? \"Let's go!!\" : `${timer} seconds to start!`}`\n                            : 'Fetching text..'}\n                    </CountDownTimer>\n                    <div style={{ position: 'relative' }}>\n                        {!showResults && (\n                            <UserStats>\n                                <p>{`Current Speed : ${wpm} wpm`}</p>\n                                {/*<SecondaryButton onClick={this.reset}>*/}\n                                    {/*Reset*/}\n                                {/*</SecondaryButton>*/}\n                                {(timeElapsed===0) ? null:(\n                                    <SecondaryButton onClick={this.reset}>\n                                    Reset\n                                    </SecondaryButton>)\n                                }\n                                {(timeElapsed===0) ? (<div className='watch'>\n                                    Time elapsed  00 : 00\n                                </div>):(\n                                    <div className='watch'>\n                                    {`Time elapsed  ${minutes} : ${seconds}`}\n                                    </div>)\n                                }\n                            </UserStats>\n                        )}\n                    </div>\n                    {text.length ? (\n                        <GeneratedText className={`${timer !== 0 && 'disabled'}`}>{this.generateText()}</GeneratedText>\n                    ) : (\n                        <Loader/>\n                    )}\n                    {!showResults ? (\n                        <>\n                        <CurrentWord>\n                            {currentWord && this.generateCurrentTypingWord(currentWord)}\n                        </CurrentWord>\n                        <Keyboard\n                            ref={r => this.keyboardRef = r}\n                            onChange={input =>\n                                this.onKeyBoardChange(input)}\n                            onKeyPress={button =>\n                                this.onKeyBoardKeyPress(button)}\n                            layout={{\n                                'default': [\n                                    '` 1 2 3 4 5 6 7 8 9 0 - = {bksp}',\n                                    '{tab} q w e r t y u i o p [ ] \\\\',\n                                    '{lock} a s d f g h j k l ; \\' {enter}',\n                                    '{shift} z x c v b n m , . / {shift}',\n                                    '{space}'\n                                ],\n                                'shift': [\n                                    '~ ! @ # $ % ^ & * ( ) _ + {bksp}',\n                                    '{tab} Q W E R T Y U I O P { } |',\n                                    '{lock} A S D F G H J K L : \" {enter}',\n                                    '{shift} Z X C V B N M < > ? {shift}',\n                                    '{space}'\n                                ]\n                            }}\n                            display={{\n                                '{bksp}': 'backspace',\n                                '{enter}': 'enter',\n                                '{tab}': 'tab',\n                                '{lock}': 'caps lock',\n                                '{shift}': 'shift',\n                                '{space}': ' ',\n                            }}\n                        />\n                        </>\n                    ) : (\n                        <ResultsDiv>\n                            <ResultsContainer>\n                                <h4>Results</h4>\n                                <p>{`Total time : ${minutes} minutes, ${seconds} seconds`}</p>\n                                <p>{`Total letters : ${totalLength} letters`}</p>\n                                <p>{`Total Words: ${totalWords} words`}</p>\n                                <p>{`Speed : ${wpm} words per minute`}</p>\n                                <p>{`Accuracy : ${accuracy} %`}</p>\n                            </ResultsContainer>\n                            <RetryButton onClick={this.reset}>\n                                Try again\n                            </RetryButton>\n                        </ResultsDiv>\n                    )}\n                </TutorContainer>\n            </AppContainer>\n        )\n    }\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst HeaderContainer = styled.div`\n  grid-area: header;\n  position: fixed;\n  width: 100%\n  top: 0;\n  background-color: white;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-content: center;\n  height: 60px;\n  box-shadow: 0 2px 2px 0 #b2b2b2;\n  z-index: 100;\n`;\n\nconst LeftContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-content: center;\n  padding: 20px;\n  color: rgb(1,167,88);\n`;\n\nconst RightContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-content: center;\n  padding: 20px;\n`;\n\nconst Header = () => {\n    return (\n        <>\n            <HeaderContainer>\n                <LeftContainer>Typing Tutor</LeftContainer>\n                <RightContainer>Pujan Thapa</RightContainer>\n            </HeaderContainer>\n        </>\n    );\n};\n\nexport default Header;\n","import styled from 'styled-components';\n\nconst PrimaryButton = styled.button`\n  background-color: rgb(1,167,88);\n  color: white;\n  font-size: 1rem;\n  font-weight: bold;\n  text-align: center;\n  border: 0.5px solid rgb(1,167,88);\n  border-radius: 50px;\n  outline: none;\n  padding-left: 1.5rem;\n  padding-right: 1.5rem;\n  cursor: pointer;  \n  min-width: 100px;\n  height: 34px;\n  user-select: none;\n\n  &:hover:not([disabled]),\n  &:focus:not([disabled]) {\n    background-color: rgb(1,167,88);\n    border-color: rgb(1,167,88);\n  }\n\n  &:disabled,\n  &:hover:disabled,\n  &:focus:disabled {\n    cursor: not-allowed;\n    color: white;\n    background-color: rgb(1,167,88);\n    border-color: rgb(1,167,88);\n    opacity: 0.5;\n  }\n`;\n\nexport default PrimaryButton;\n","import Typed from 'typed.js';\nimport React from 'react';\n\nexport default class TypedReactDemo extends React.Component {\n    componentDidMount() {\n        const { strings } = this.props;\n        const options = {\n            strings: strings,\n            typeSpeed: 20,\n            backSpeed: 20,\n            loop: true,\n            loopCount: Infinity,\n        };\n        this.typed = new Typed(this.el, options);\n    }\n\n    componentWillUnmount() {\n        this.typed.destroy();\n    }\n\n    render() {\n        return (\n            <div className=\"wrap\">\n                <div className=\"type-wrap\">\n                  <span\n                      style={{ whiteSpace: 'pre' }}\n                      ref={(el) => { this.el = el; }}\n                  />\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react'\n\nimport TypeTutor from './tutor';\n// import Footer from './components/footer';\nimport Header from './components/header';\nimport PrimaryButton from './components/PrimaryButton';\nimport styled from 'styled-components';\nimport TypedReactDemo from './components/TypingAnim'\n\nconst AppDiv = styled.div`\n     width: 100%;\n     margin: auto;\n`;\n\nconst ModalDiv = styled.div`\n    position: relative;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 85vh;\n    background: rgba(255, 255, 255, 1);\n    display: flex;\n    box-sizing: border-box;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    transition: all 0.2s ease-in-out;\n    \n    &.show {\n        z-index:2;\n        opacity:1;\n    }\n    \n    &.hide {\n      z-index: -2;\n      opacity: 0;  \n    }\n    \n    h4 {\n        font-size: 1.42em;\n        font-weight: 500;\n    }\n    \n    p {\n        width: 70%;\n        text-align: center;\n        line-height: 1.6em;\n    }\n`;\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showModal: true,\n        };\n\n        this.hideModal = () => this.setState({ showModal: false });\n        // this.showModal = () => this.setState({ showModal: true });\n    }\n\n    render() {\n        const { showModal } = this.state;\n        return (\n            <AppDiv>\n                <Header/>\n                {showModal ? (<ModalDiv>\n                    <TypedReactDemo\n                        strings={[\n                            'Lets get started',\n                            'Increase your typing efficiency',\n                            'Be a pro!'\n                        ]}\n                    />\n                    <h4>Learn to type.</h4>\n                    <p>Click button below to start your lesson.</p>\n                    <PrimaryButton onClick={this.hideModal}>\n                        Start\n                    </PrimaryButton>\n                </ModalDiv>): <TypeTutor/>}\n                {/*<Footer/>*/}\n            </AppDiv>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}